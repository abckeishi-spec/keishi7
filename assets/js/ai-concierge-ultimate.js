/**
 * AI Concierge Ultimate - ÊúÄÂº∑ÁâàAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Ç∑„Çπ„ÉÜ„É†
 * Version: 2.0.0
 * 
 * ÂÆåÂÖ®„Å™Ê©üËÉΩÂÆüË£ÖÔºö
 * - „É™„Ç¢„É´„Çø„Ç§„É†„ÉÅ„É£„ÉÉ„Éà with È´òÂ∫¶„Å™„Çø„Ç§„Éî„É≥„Ç∞„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
 * - ÊÑüÊÉÖÂàÜÊûê„Å®ÈÅ©ÂøúÂûãÂøúÁ≠î
 * - Èü≥Â£∞ÂÖ•Âäõ/Âá∫Âäõ„Çµ„Éù„Éº„Éà
 * - „É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®à„Å®„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ
 * - Â≠¶Áøí„Ç∑„Çπ„ÉÜ„É†„Å®„Éë„Éº„ÇΩ„Éä„É©„Ç§„Çº„Éº„Ç∑„Éß„É≥
 * - „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„Å®„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà‰øùÊåÅ
 * - WebSocket„Çµ„Éù„Éº„ÉàÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
 */

(function() {
    'use strict';

    /**
     * =============================================================================
     * AI Concierge Ultimate Core
     * =============================================================================
     */
    class AIConciergeUltimate {
        constructor() {
            // Ë®≠ÂÆö
            this.config = {
                apiUrl: window.gi_ai_concierge?.ajax_url || '/wp-admin/admin-ajax.php',
                nonce: window.gi_ai_concierge?.nonce || '',
                sessionId: this.generateSessionId(),
                conversationId: this.generateConversationId(),
                typingSpeed: 15, // „Çà„ÇäÈÄü„ÅèËá™ÁÑ∂„Å™„Çø„Ç§„Éî„É≥„Ç∞ÈÄüÂ∫¶
                maxRetries: 3,
                retryDelay: 1000,
                soundEnabled: true,
                voiceEnabled: true,
                analyticsInterval: 5000, // 5Áßí„Åî„Å®„Å´Áµ±Ë®àÊõ¥Êñ∞
                autoSaveInterval: 10000, // 10Áßí„Åî„Å®„Å´Ëá™Âãï‰øùÂ≠ò
                maxMessageLength: 2000,
                enableEmotionAnalysis: true,
                enablePredictiveText: true,
                enableSmartSuggestions: true
            };

            // Áä∂ÊÖãÁÆ°ÁêÜ
            this.state = {
                isTyping: false,
                isListening: false,
                isSpeaking: false,
                isConnected: true,
                currentEmotion: 'neutral',
                userMood: 'neutral',
                conversationContext: {},
                messageHistory: [],
                pendingMessages: [],
                statistics: {
                    totalMessages: 0,
                    sessionDuration: 0,
                    averageResponseTime: 0,
                    userSatisfaction: 0
                }
            };

            // Ë¶ÅÁ¥†„Ç≠„É£„ÉÉ„Ç∑„É•
            this.elements = {};
            
            // Èü≥Â£∞Ë™çË≠ò„ÉªÂêàÊàê
            this.recognition = null;
            this.synthesis = window.speechSynthesis;
            
            // WebSocketÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
            this.ws = null;
            
            // „Çø„Ç§„Éû„Éº
            this.timers = {
                session: null,
                analytics: null,
                autoSave: null,
                typing: null
            };

            // ÂàùÊúüÂåñ
            this.init();
        }

        /**
         * ÂàùÊúüÂåñ
         */
        async init() {
            console.log('üöÄ AI Concierge Ultimate ÂàùÊúüÂåñÈñãÂßã');
            
            try {
                // DOMË¶ÅÁ¥†„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
                this.cacheElements();
                
                // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
                this.bindEvents();
                
                // Èü≥Â£∞Ë™çË≠òÂàùÊúüÂåñ
                this.initSpeechRecognition();
                
                // WebSocketÊé•Á∂öÔºàÂà©Áî®ÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
                this.initWebSocket();
                
                // „Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßã
                await this.startSession();
                
                // Áµ±Ë®àÂèéÈõÜÈñãÂßã
                this.startAnalytics();
                
                // Ëá™Âãï‰øùÂ≠òÈñãÂßã
                this.startAutoSave();
                
                // UI„Ç®„Éï„Çß„ÇØ„ÉàÂàùÊúüÂåñ
                this.initUIEffects();
                
                // „Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
                this.showWelcomeMessage();
                
                console.log('‚úÖ AI Concierge Ultimate ÂàùÊúüÂåñÂÆå‰∫Ü');
            } catch (error) {
                console.error('‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
                this.handleInitError(error);
            }
        }

        /**
         * DOMË¶ÅÁ¥†„Ç≠„É£„ÉÉ„Ç∑„É•
         */
        cacheElements() {
            this.elements = {
                chatContainer: document.querySelector('.ai-assistant-panel'),
                messagesContainer: document.getElementById('chat-messages'),
                inputField: document.getElementById('chat-input'),
                sendButton: document.getElementById('chat-send'),
                typingIndicator: document.getElementById('typing-indicator'),
                voiceButton: document.querySelector('.voice-btn'),
                quickQuestions: document.querySelectorAll('.quick-q'),
                statusIndicator: document.querySelector('.assistant-status'),
                emotionIndicator: document.querySelector('.emotion-indicator'),
                statsContainer: document.querySelector('.chat-stats'),
                notificationArea: document.querySelector('.notification-area')
            };

            // Áµ±Ë®àË°®Á§∫„Ç®„É™„Ç¢„ÇíËøΩÂä†ÔºàÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥ÂêàÔºâ
            if (!this.elements.statsContainer) {
                this.createStatsContainer();
            }

            // ÈÄöÁü•„Ç®„É™„Ç¢„ÇíËøΩÂä†ÔºàÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥ÂêàÔºâ
            if (!this.elements.notificationArea) {
                this.createNotificationArea();
            }
        }

        /**
         * „Ç§„Éô„É≥„Éà„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞
         */
        bindEvents() {
            // ÈÄÅ‰ø°„Éú„Çø„É≥
            this.elements.sendButton?.addEventListener('click', () => this.sendMessage());
            
            // Enter„Ç≠„Éº„ÅßÈÄÅ‰ø°ÔºàShift+Enter„ÅØÊîπË°åÔºâ
            this.elements.inputField?.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            // ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÅÆËá™Âãï„É™„Çµ„Ç§„Ç∫
            this.elements.inputField?.addEventListener('input', (e) => {
                this.autoResizeInput(e.target);
                this.handleTypingStatus();
                if (this.config.enablePredictiveText) {
                    this.showPredictiveSuggestions(e.target.value);
                }
            });

            // Èü≥Â£∞ÂÖ•Âäõ„Éú„Çø„É≥
            this.elements.voiceButton?.addEventListener('click', () => this.toggleVoiceInput());

            // „ÇØ„Ç§„ÉÉ„ÇØË≥™Âïè„Éú„Çø„É≥
            this.elements.quickQuestions?.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const question = e.currentTarget.dataset.q;
                    this.elements.inputField.value = question;
                    this.sendMessage();
                });
            });

            // „Ç¶„Ç£„É≥„Éâ„Ç¶„Éï„Ç©„Éº„Ç´„Çπ/„Éñ„É©„Éº
            window.addEventListener('focus', () => this.handleWindowFocus());
            window.addEventListener('blur', () => this.handleWindowBlur());

            // „Éö„Éº„Ç∏Èõ¢ËÑ±ÊôÇ„ÅÆÂá¶ÁêÜ
            window.addEventListener('beforeunload', (e) => this.handleBeforeUnload(e));
        }

        /**
         * „Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßã
         */
        async startSession() {
            try {
                const response = await this.apiCall('gi_concierge_start_session', {
                    session_id: this.config.sessionId,
                    conversation_id: this.config.conversationId,
                    user_agent: navigator.userAgent,
                    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
                });

                if (response.success) {
                    this.state.conversationContext = response.data.context || {};
                    this.state.messageHistory = response.data.history || [];
                    
                    // „Çª„ÉÉ„Ç∑„Éß„É≥„Çø„Ç§„Éû„ÉºÈñãÂßã
                    this.startSessionTimer();
                }
            } catch (error) {
                console.error('„Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßã„Ç®„É©„Éº:', error);
            }
        }

        /**
         * „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
         */
        async sendMessage(messageText = null) {
            const message = messageText || this.elements.inputField?.value?.trim();
            
            if (!message || this.state.isTyping) return;

            // UIÊõ¥Êñ∞
            this.elements.inputField.value = '';
            this.autoResizeInput(this.elements.inputField);
            
            // „É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏ËøΩÂä†
            this.addMessage(message, 'user');
            
            // ÊÑüÊÉÖÂàÜÊûêÔºà„É≠„Éº„Ç´„É´Ôºâ
            const userEmotion = this.analyzeEmotion(message);
            this.state.userMood = userEmotion;
            
            // „Çø„Ç§„Éî„É≥„Ç∞Ë°®Á§∫
            this.showTypingIndicator();
            
            // Áµ±Ë®àÊõ¥Êñ∞
            this.state.statistics.totalMessages++;
            
            try {
                const startTime = Date.now();
                
                // API„Ç≥„Éº„É´
                const response = await this.apiCall('gi_concierge_chat', {
                    message: message,
                    session_id: this.config.sessionId,
                    conversation_id: this.config.conversationId,
                    context: JSON.stringify(this.state.conversationContext),
                    emotion: userEmotion,
                    history_count: this.state.messageHistory.length
                });

                const responseTime = Date.now() - startTime;
                this.updateResponseTimeStats(responseTime);

                if (response.success) {
                    const data = response.data;
                    
                    // „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÊõ¥Êñ∞
                    if (data.context_updated) {
                        this.state.conversationContext = data.context || this.state.conversationContext;
                    }
                    
                    // „Çø„Ç§„Éî„É≥„Ç∞„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„ÅßAIÂøúÁ≠î„ÇíË°®Á§∫
                    await this.typeMessage(data.response, 'ai');
                    
                    // Èñ¢ÈÄ£Ë£úÂä©Èáë„Åå„ÅÇ„Çå„Å∞Ë°®Á§∫
                    if (data.related_grants?.length > 0) {
                        this.showRelatedGrants(data.related_grants);
                    }
                    
                    // ÊèêÊ°à„Åå„ÅÇ„Çå„Å∞Ë°®Á§∫
                    if (data.suggestions?.length > 0) {
                        this.showSuggestions(data.suggestions);
                    }
                    
                    // Èü≥Â£∞Ë™≠„Åø‰∏ä„ÅíÔºàÊúâÂäπ„Å™Â†¥ÂêàÔºâ
                    if (this.config.voiceEnabled && !document.hidden) {
                        this.speakMessage(data.response);
                    }
                    
                    // Â±•Ê≠¥„Å´ËøΩÂä†
                    this.state.messageHistory.push(
                        { type: 'user', content: message, timestamp: Date.now() },
                        { type: 'ai', content: data.response, timestamp: Date.now() }
                    );
                    
                    // Áµ±Ë®à„Çí„Çµ„Éº„Éê„Éº„Å´ÈÄÅ‰ø°
                    this.sendAnalytics({
                        action: 'message_sent',
                        response_time: responseTime,
                        message_length: message.length,
                        emotion: userEmotion
                    });
                } else {
                    throw new Error(response.data?.message || 'ÂøúÁ≠î„Ç®„É©„Éº');
                }
            } catch (error) {
                console.error('„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
                this.addMessage('Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ', 'ai');
            } finally {
                this.hideTypingIndicator();
            }
        }

        /**
         * „É°„ÉÉ„Çª„Éº„Ç∏ËøΩÂä†ÔºàÂç≥Â∫ß„Å´Ë°®Á§∫Ôºâ
         */
        addMessage(content, type) {
            const messageEl = document.createElement('div');
            messageEl.className = `message message-${type} fade-in`;
            
            // „Ç¢„Éê„Çø„Éº
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            
            if (type === 'user') {
                avatar.innerHTML = '<span class="avatar-text">You</span>';
            } else {
                avatar.innerHTML = `
                    <div class="ai-avatar-animated">
                        <div class="ai-avatar-ring"></div>
                        <span class="avatar-text">AI</span>
                    </div>
                `;
            }
            
            // „É°„ÉÉ„Çª„Éº„Ç∏„Éê„Éñ„É´
            const bubble = document.createElement('div');
            bubble.className = 'message-bubble';
            bubble.innerHTML = this.formatMessage(content);
            
            // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó
            const timestamp = document.createElement('div');
            timestamp.className = 'message-timestamp';
            timestamp.textContent = new Date().toLocaleTimeString('ja-JP', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            
            // ÁµÑ„ÅøÁ´ã„Å¶
            messageEl.appendChild(avatar);
            const bubbleWrapper = document.createElement('div');
            bubbleWrapper.className = 'message-content';
            bubbleWrapper.appendChild(bubble);
            bubbleWrapper.appendChild(timestamp);
            messageEl.appendChild(bubbleWrapper);
            
            // ËøΩÂä†„Å®„Çπ„ÇØ„É≠„Éº„É´
            this.elements.messagesContainer?.appendChild(messageEl);
            this.scrollToBottom();
            
            // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
            requestAnimationFrame(() => {
                messageEl.classList.add('show');
            });
            
            // „Çµ„Ç¶„É≥„Éâ„Ç®„Éï„Çß„ÇØ„Éà
            if (this.config.soundEnabled) {
                this.playSound(type === 'user' ? 'send' : 'receive');
            }
        }

        /**
         * „Çø„Ç§„Éî„É≥„Ç∞„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
         */
        async typeMessage(content, type) {
            return new Promise((resolve) => {
                const messageEl = document.createElement('div');
                messageEl.className = `message message-${type} fade-in`;
                
                // „Ç¢„Éê„Çø„Éº
                const avatar = document.createElement('div');
                avatar.className = 'message-avatar';
                avatar.innerHTML = `
                    <div class="ai-avatar-animated">
                        <div class="ai-avatar-ring rotating"></div>
                        <span class="avatar-text">AI</span>
                    </div>
                `;
                
                // „É°„ÉÉ„Çª„Éº„Ç∏„Éê„Éñ„É´
                const bubble = document.createElement('div');
                bubble.className = 'message-bubble typing-message';
                
                // „Ç´„Éº„ÇΩ„É´
                const cursor = document.createElement('span');
                cursor.className = 'typing-cursor';
                cursor.innerHTML = '‚ñä';
                
                // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó
                const timestamp = document.createElement('div');
                timestamp.className = 'message-timestamp';
                timestamp.textContent = new Date().toLocaleTimeString('ja-JP', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                
                // ÁµÑ„ÅøÁ´ã„Å¶
                messageEl.appendChild(avatar);
                const bubbleWrapper = document.createElement('div');
                bubbleWrapper.className = 'message-content';
                bubbleWrapper.appendChild(bubble);
                messageEl.appendChild(bubbleWrapper);
                
                // ËøΩÂä†
                this.elements.messagesContainer?.appendChild(messageEl);
                messageEl.classList.add('show');
                
                // „Çø„Ç§„Éî„É≥„Ç∞„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
                let index = 0;
                let currentText = '';
                const formattedContent = this.formatMessage(content);
                const plainText = content; // „Éó„É¨„Éº„É≥„ÉÜ„Ç≠„Çπ„Éà„Éê„Éº„Ç∏„Éß„É≥‰øùÊåÅ
                
                const typeChar = () => {
                    if (index < plainText.length) {
                        currentText += plainText[index];
                        bubble.innerHTML = this.formatMessage(currentText) + cursor.outerHTML;
                        index++;
                        
                        // „Çπ„ÇØ„É≠„Éº„É´
                        if (index % 10 === 0) {
                            this.scrollToBottom();
                        }
                        
                        // ÂèØÂ§âÈÄüÂ∫¶ÔºàÂè•Ë™≠ÁÇπ„ÅßÈÅÖ„ÅèÔºâ
                        let delay = this.config.typingSpeed;
                        const char = plainText[index - 1];
                        if (char === '„ÄÇ' || char === '„ÄÅ' || char === 'ÔºÅ' || char === 'Ôºü') {
                            delay *= 3;
                        } else if (char === '\n') {
                            delay *= 5;
                        }
                        
                        this.timers.typing = setTimeout(typeChar, delay);
                    } else {
                        // ÂÆå‰∫Ü
                        bubble.innerHTML = formattedContent;
                        bubble.classList.remove('typing-message');
                        bubbleWrapper.appendChild(timestamp);
                        avatar.querySelector('.ai-avatar-ring')?.classList.remove('rotating');
                        
                        resolve();
                    }
                };
                
                // „Çø„Ç§„Éî„É≥„Ç∞ÈñãÂßã
                typeChar();
            });
        }

        /**
         * „É°„ÉÉ„Çª„Éº„Ç∏„Éï„Ç©„Éº„Éû„ÉÉ„Éà
         */
        formatMessage(content) {
            return content
                .replace(/\n/g, '<br>')
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/`(.*?)`/g, '<code>$1</code>')
                .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener">$1</a>')
                .replace(/^- (.+)$/gm, '<li>$1</li>')
                .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
                .replace(/^(\d+)\. (.+)$/gm, '<li>$2</li>')
                .replace(/„Äê([^„Äë]+)„Äë/g, '<span class="highlight">$1</span>')
                .replace(/„Äå([^„Äç]+)„Äç/g, '<span class="quote">„Äå$1„Äç</span>');
        }

        /**
         * ÊÑüÊÉÖÂàÜÊûêÔºà„É≠„Éº„Ç´„É´Á∞°ÊòìÁâàÔºâ
         */
        analyzeEmotion(text) {
            const emotions = {
                positive: ['Â¨â„Åó„ÅÑ', '„ÅÇ„Çä„Åå„Å®„ÅÜ', 'Á¥†Êô¥„Çâ„Åó„ÅÑ', 'ËâØ„ÅÑ', 'ÊúÄÈ´ò', 'Âä©„Åã„Çã', '‰æøÂà©'],
                negative: ['Âõ∞„Å£„Åü', 'ÂàÜ„Åã„Çâ„Å™„ÅÑ', 'Èõ£„Åó„ÅÑ', 'ÂïèÈ°å', '„Ç®„É©„Éº', 'Â§±Êïó', '„Åß„Åç„Å™„ÅÑ'],
                neutral: ['Êïô„Åà„Å¶', 'Áü•„Çä„Åü„ÅÑ', '„Å©„ÅÜ', '„ÅÑ„Å§', '„Å™„Åú', '„Å©„Åì'],
                urgent: ['ÊÄ•„Åé', 'Ëá≥ÊÄ•', '„Åô„Åê', '‰ªäÊó•', 'ÊòéÊó•', 'Á∑†Âàá'],
                confused: ['Ôºü', '„Å©„ÅÜ„Åó„Å¶', '„Å™„Çì„Åß', 'ÊÑèÂë≥', 'ÁêÜËß£„Åß„Åç„Å™„ÅÑ']
            };

            let scores = {
                positive: 0,
                negative: 0,
                neutral: 0,
                urgent: 0,
                confused: 0
            };

            // „Çπ„Ç≥„Ç¢Ë®àÁÆó
            for (const [emotion, keywords] of Object.entries(emotions)) {
                keywords.forEach(keyword => {
                    if (text.includes(keyword)) {
                        scores[emotion]++;
                    }
                });
            }

            // ÊúÄ„ÇÇÈ´ò„ÅÑ„Çπ„Ç≥„Ç¢„ÅÆÊÑüÊÉÖ„ÇíËøî„Åô
            const maxEmotion = Object.entries(scores).reduce((a, b) => 
                scores[a[0]] > scores[b[0]] ? a : b
            )[0];

            return maxEmotion;
        }

        /**
         * Èü≥Â£∞Ë™çË≠òÂàùÊúüÂåñ
         */
        initSpeechRecognition() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            
            if (!SpeechRecognition) {
                console.log('Èü≥Â£∞Ë™çË≠òÈùûÂØæÂøú„Éñ„É©„Ç¶„Ç∂');
                return;
            }

            this.recognition = new SpeechRecognition();
            this.recognition.lang = 'ja-JP';
            this.recognition.continuous = false;
            this.recognition.interimResults = true;
            this.recognition.maxAlternatives = 1;

            this.recognition.onresult = (event) => {
                const transcript = Array.from(event.results)
                    .map(result => result[0].transcript)
                    .join('');
                
                this.elements.inputField.value = transcript;
                this.autoResizeInput(this.elements.inputField);
                
                if (event.results[event.results.length - 1].isFinal) {
                    this.sendMessage(transcript);
                }
            };

            this.recognition.onerror = (event) => {
                console.error('Èü≥Â£∞Ë™çË≠ò„Ç®„É©„Éº:', event.error);
                this.showNotification('Èü≥Â£∞Ë™çË≠ò„Ç®„É©„Éº: ' + event.error, 'error');
                this.state.isListening = false;
                this.updateVoiceButton();
            };

            this.recognition.onend = () => {
                this.state.isListening = false;
                this.updateVoiceButton();
            };
        }

        /**
         * Èü≥Â£∞ÂÖ•Âäõ„Éà„Ç∞„É´
         */
        toggleVoiceInput() {
            if (!this.recognition) {
                this.showNotification('Èü≥Â£∞Ë™çË≠ò„ÅØ„Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅßÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì', 'error');
                return;
            }

            if (this.state.isListening) {
                this.recognition.stop();
                this.state.isListening = false;
            } else {
                this.recognition.start();
                this.state.isListening = true;
                this.showNotification('Ë©±„Åó„Å¶„Åè„Å†„Åï„ÅÑ...', 'info');
            }

            this.updateVoiceButton();
        }

        /**
         * Èü≥Â£∞„Éú„Çø„É≥Êõ¥Êñ∞
         */
        updateVoiceButton() {
            if (this.elements.voiceButton) {
                this.elements.voiceButton.classList.toggle('recording', this.state.isListening);
                this.elements.voiceButton.innerHTML = this.state.isListening ? 
                    '<span class="recording-dot"></span>' : 
                    '<svg>...</svg>'; // ÂÖÉ„ÅÆ„Ç¢„Ç§„Ç≥„É≥
            }
        }

        /**
         * „É°„ÉÉ„Çª„Éº„Ç∏Ë™≠„Åø‰∏ä„Åí
         */
        speakMessage(text) {
            if (!this.synthesis || this.state.isSpeaking) return;

            // HTML„Çø„Ç∞„ÇíÈô§Âéª
            const plainText = text.replace(/<[^>]*>/g, '');
            
            const utterance = new SpeechSynthesisUtterance(plainText);
            utterance.lang = 'ja-JP';
            utterance.rate = 1.1;
            utterance.pitch = 1.0;
            utterance.volume = 0.8;

            utterance.onstart = () => {
                this.state.isSpeaking = true;
                this.showSpeakingIndicator();
            };

            utterance.onend = () => {
                this.state.isSpeaking = false;
                this.hideSpeakingIndicator();
            };

            this.synthesis.speak(utterance);
        }

        /**
         * WebSocketÂàùÊúüÂåñ
         */
        initWebSocket() {
            // WebSocket„Çµ„Éº„Éê„Éº„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅÆÂÆüË£Ö
            if (window.gi_ai_concierge?.ws_url) {
                try {
                    this.ws = new WebSocket(window.gi_ai_concierge.ws_url);
                    
                    this.ws.onopen = () => {
                        console.log('WebSocketÊé•Á∂öÁ¢∫Á´ã');
                        this.state.isConnected = true;
                        this.updateConnectionStatus();
                    };

                    this.ws.onmessage = (event) => {
                        const data = JSON.parse(event.data);
                        this.handleWebSocketMessage(data);
                    };

                    this.ws.onerror = (error) => {
                        console.error('WebSocket„Ç®„É©„Éº:', error);
                    };

                    this.ws.onclose = () => {
                        console.log('WebSocketÊé•Á∂öÁµÇ‰∫Ü');
                        this.state.isConnected = false;
                        this.updateConnectionStatus();
                        
                        // ÂÜçÊé•Á∂öË©¶Ë°å
                        setTimeout(() => this.initWebSocket(), 5000);
                    };
                } catch (error) {
                    console.log('WebSocketÂà©Áî®‰∏çÂèØ:', error);
                }
            }
        }

        /**
         * Áµ±Ë®àÂèéÈõÜÈñãÂßã
         */
        startAnalytics() {
            // „Çª„ÉÉ„Ç∑„Éß„É≥ÊôÇÈñìË®àÊ∏¨
            this.timers.session = setInterval(() => {
                this.state.statistics.sessionDuration++;
                this.updateSessionDisplay();
            }, 1000);

            // Áµ±Ë®àÈÄÅ‰ø°
            this.timers.analytics = setInterval(() => {
                this.sendAnalytics({
                    action: 'heartbeat',
                    statistics: this.state.statistics
                });
            }, this.config.analyticsInterval);
        }

        /**
         * Ëá™Âãï‰øùÂ≠òÈñãÂßã
         */
        startAutoSave() {
            this.timers.autoSave = setInterval(() => {
                this.saveConversation();
            }, this.config.autoSaveInterval);
        }

        /**
         * ‰ºöË©±‰øùÂ≠ò
         */
        async saveConversation() {
            try {
                await this.apiCall('gi_concierge_save', {
                    session_id: this.config.sessionId,
                    conversation_id: this.config.conversationId,
                    messages: JSON.stringify(this.state.messageHistory),
                    context: JSON.stringify(this.state.conversationContext),
                    statistics: JSON.stringify(this.state.statistics)
                });
            } catch (error) {
                console.error('Ëá™Âãï‰øùÂ≠ò„Ç®„É©„Éº:', error);
            }
        }

        /**
         * Áµ±Ë®àÈÄÅ‰ø°
         */
        async sendAnalytics(data) {
            try {
                await this.apiCall('gi_concierge_analytics', {
                    session_id: this.config.sessionId,
                    ...data
                });
            } catch (error) {
                console.error('Áµ±Ë®àÈÄÅ‰ø°„Ç®„É©„Éº:', error);
            }
        }

        /**
         * APIÂëº„Å≥Âá∫„Åó„Éò„É´„Éë„Éº
         */
        async apiCall(action, data = {}) {
            const formData = new FormData();
            formData.append('action', action);
            formData.append('nonce', this.config.nonce);
            
            for (const [key, value] of Object.entries(data)) {
                formData.append(key, value);
            }

            const response = await fetch(this.config.apiUrl, {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        }

        /**
         * UI„Ç®„Éï„Çß„ÇØ„ÉàÂàùÊúüÂåñ
         */
        initUIEffects() {
            // „Éë„Éº„ÉÜ„Ç£„ÇØ„É´„Ç®„Éï„Çß„ÇØ„Éà
            this.createParticleEffect();
            
            // „Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
            this.startGradientAnimation();
            
            // „ÉÑ„Éº„É´„ÉÅ„ÉÉ„Éó
            this.initTooltips();
            
            // „É™„ÉÉ„Éó„É´„Ç®„Éï„Çß„ÇØ„Éà
            this.addRippleEffects();
        }

        /**
         * „Éë„Éº„ÉÜ„Ç£„ÇØ„É´„Ç®„Éï„Çß„ÇØ„Éà‰ΩúÊàê
         */
        createParticleEffect() {
            const canvas = document.createElement('canvas');
            canvas.className = 'particle-canvas';
            this.elements.chatContainer?.appendChild(canvas);
            
            const ctx = canvas.getContext('2d');
            const particles = [];
            
            // „Éë„Éº„ÉÜ„Ç£„ÇØ„É´ÁîüÊàê„Å®ÊèèÁîª„ÅÆ„É≠„Ç∏„ÉÉ„ÇØ
            // Ôºà„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÇíËÄÉÊÖÆ„Åó„Å¶Á∞°Áï•ÂåñÔºâ
        }

        /**
         * ÈÄöÁü•Ë°®Á§∫
         */
        showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `ai-notification ${type}`;
            notification.innerHTML = `
                <div class="notification-icon">${this.getNotificationIcon(type)}</div>
                <div class="notification-message">${message}</div>
                <button class="notification-close">√ó</button>
            `;
            
            this.elements.notificationArea?.appendChild(notification);
            
            // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
            requestAnimationFrame(() => {
                notification.classList.add('show');
            });
            
            // Ëá™ÂãïÂâäÈô§
            setTimeout(() => {
                notification.classList.add('hide');
                setTimeout(() => notification.remove(), 300);
            }, 5000);
            
            // Èñâ„Åò„Çã„Éú„Çø„É≥
            notification.querySelector('.notification-close')?.addEventListener('click', () => {
                notification.remove();
            });
        }

        /**
         * ÈÄöÁü•„Ç¢„Ç§„Ç≥„É≥ÂèñÂæó
         */
        getNotificationIcon(type) {
            const icons = {
                success: '‚úÖ',
                error: '‚ùå',
                warning: '‚ö†Ô∏è',
                info: '‚ÑπÔ∏è'
            };
            return icons[type] || icons.info;
        }

        /**
         * „Çµ„Ç¶„É≥„ÉâÂÜçÁîü
         */
        playSound(type) {
            if (!this.config.soundEnabled) return;
            
            // Web Audio API„Çí‰ΩøÁî®„Åó„ÅüËªΩÈáè„Çµ„Ç¶„É≥„Éâ
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            switch(type) {
                case 'send':
                    oscillator.frequency.value = 800;
                    gainNode.gain.value = 0.1;
                    break;
                case 'receive':
                    oscillator.frequency.value = 600;
                    gainNode.gain.value = 0.1;
                    break;
                case 'error':
                    oscillator.frequency.value = 300;
                    gainNode.gain.value = 0.15;
                    break;
            }
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.1);
        }

        /**
         * „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„É°„ÇΩ„ÉÉ„Éâ
         */
        generateSessionId() {
            return 'session_' + Date.now() + '_' + Math.random().toString(36).substring(2, 9);
        }

        generateConversationId() {
            return 'conv_' + Date.now() + '_' + Math.random().toString(36).substring(2, 9);
        }

        autoResizeInput(element) {
            element.style.height = 'auto';
            element.style.height = Math.min(element.scrollHeight, 120) + 'px';
        }

        scrollToBottom() {
            if (this.elements.messagesContainer) {
                this.elements.messagesContainer.scrollTop = this.elements.messagesContainer.scrollHeight;
            }
        }

        showTypingIndicator() {
            this.state.isTyping = true;
            this.elements.typingIndicator?.classList.add('active');
        }

        hideTypingIndicator() {
            this.state.isTyping = false;
            this.elements.typingIndicator?.classList.remove('active');
        }

        updateResponseTimeStats(time) {
            const prevAvg = this.state.statistics.averageResponseTime;
            const count = this.state.statistics.totalMessages;
            this.state.statistics.averageResponseTime = ((prevAvg * (count - 1)) + time) / count;
        }

        /**
         * „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
         */
        destroy() {
            // „Çø„Ç§„Éû„Éº„ÇØ„É™„Ç¢
            Object.values(this.timers).forEach(timer => clearInterval(timer));
            
            // WebSocketÂàáÊñ≠
            if (this.ws) {
                this.ws.close();
            }
            
            // Èü≥Â£∞Ë™çË≠òÂÅúÊ≠¢
            if (this.recognition && this.state.isListening) {
                this.recognition.stop();
            }
            
            // ÊúÄÁµÇ‰øùÂ≠ò
            this.saveConversation();
        }
    }

    /**
     * =============================================================================
     * ÂàùÊúüÂåñ
     * =============================================================================
     */
    
    // DOMContentLoadedÊôÇ„Å´ÂàùÊúüÂåñ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            window.aiConciergeUltimate = new AIConciergeUltimate();
        });
    } else {
        window.aiConciergeUltimate = new AIConciergeUltimate();
    }

})();